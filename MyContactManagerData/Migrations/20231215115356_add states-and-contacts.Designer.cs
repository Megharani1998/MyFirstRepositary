// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyContactManagerData;

#nullable disable

namespace MyContactManagerData.Migrations
{
    [DbContext(typeof(MyContactDBManagerContext))]
    [Migration("20231215115356_add states-and-contacts")]
    partial class addstatesandcontacts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("projectModels.Contacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhonePrimary")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneSecondary")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddress1")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("StreetAddress2")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("projectModels.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "SP",
                            Name = "Solapur"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "PU",
                            Name = "pune"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "AK",
                            Name = "akola"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "KR",
                            Name = "kurnul"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "MP",
                            Name = "maipal"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "UP",
                            Name = "UttarPradesh"
                        },
                        new
                        {
                            Id = 7,
                            Abbreviation = "MH",
                            Name = "Maharashtra"
                        },
                        new
                        {
                            Id = 8,
                            Abbreviation = "GR",
                            Name = "gujrat"
                        },
                        new
                        {
                            Id = 9,
                            Abbreviation = "BG",
                            Name = "Bangal"
                        },
                        new
                        {
                            Id = 10,
                            Abbreviation = "RS",
                            Name = "Rajsthan"
                        },
                        new
                        {
                            Id = 11,
                            Abbreviation = "MPR",
                            Name = "Manipur"
                        },
                        new
                        {
                            Id = 12,
                            Abbreviation = "RG",
                            Name = "Ratnagiri"
                        },
                        new
                        {
                            Id = 13,
                            Abbreviation = "GO",
                            Name = "Goa"
                        });
                });

            modelBuilder.Entity("projectModels.Contacts", b =>
                {
                    b.HasOne("projectModels.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });
#pragma warning restore 612, 618
        }
    }
}
